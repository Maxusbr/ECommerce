@model  Web.Models.LogisticViewModel

@{
    ViewBag.Title = "Логістика";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
    #map {
        /*width: 350px;*/
        height: 350px;
        border: 1px solid black;
        margin: 0;
        padding: 0;
        background-color: #ccc;
        overflow: hidden;
    }

    .center-block {
        text-align: center;
    }

    .table > tbody > tr > th {
        vertical-align: middle;
    }
    /*.glyphicon {
        cursor: pointer
    }*/
    .info {
        cursor: pointer;
    }

    .rotate {
        -webkit-transform: rotate(-180deg);
        -moz-transform: rotate(-180deg);
        -ms-transform: rotate(-180deg);
        -o-transform: rotate(-180deg);
        transform: rotate(-180deg);
    }
</style>
<h2>Логістика</h2>
<hr />
@using (Html.BeginForm())
{
    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(model => model.ShopAdress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShopAdress, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           @readonly = "readonly"
                       }
                   })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12">
                <div id="map"></div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-12">
                <h4>Маршрути доставки</h4>
                @Html.HiddenFor(model => model.CountRoute)
            </div>
            <div class="col-md-12">

                @{

                    Html.RenderPartial("RoutesList", Model.Routes, new ViewDataDictionary
                    {
                        TemplateInfo = new TemplateInfo { HtmlFieldPrefix = "Routes" }
                    });
                }
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.Amount, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control doubleValue",
                           @readonly = "readonly"
                       }
                   })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Прийняти маршрути" class="btn btn-primary" />
            </div>
        </div>
    </div>

                    }


@section scripts
{
    <script src="//api-maps.yandex.ru/2.1/?lang=uk_UA" type="text/javascript"></script>
    @*<script src="~/Scripts/yandex.js" type="text/javascript"></script>*@
    <script>
        var colors = ["#359789", "#E12412", "#355412", "#A12551", "#EE9086", "#7b7cf7", "#E83E92", "#1515f7"],
            counter;
        var count = $('#CountRoute').val();
        function init() {
            var shop, shopcoord, shopPoint, myMap, multiRoute;


            function createMap() {
                myMap = new ymaps.Map('map', {
                    center: shopcoord,
                    zoom: 15,
                    type: 'yandex#map',
                    controls: []
                }, { searchControlResults: 1 });
                myMap.geoObjects.add(shopPoint);
                Calc();
            }

            ymaps.geocode($("#ShopAdress").val(), { results: 1 }).then(function (res) {
                shop = res.geoObjects.get(0);
                shopcoord = shop.geometry.getCoordinates();
                shopPoint = new ymaps.Placemark(shopcoord, { iconContent: 'Магазин' }, { preset: 'islands#redStretchyIcon' });
                createMap();
            });

            function Calc() {
                var distance;
                counter = 0;
                //myMap.geoObjects.remove(multiRoute);
                for (var i = 0; i < count; i++) {
                    var adr = $('#Routes_' + i + '__OrdersAdresses').val().split(';'),
                        shopadress = $("#ShopAdress").val(),
                        adress = [shopadress];
                    adress.push.apply(adress, adr);
                    adress.push(shopadress);

                    ymaps.route(adress).then(function (router) {
                        distance = Math.round(router.getLength() / 1000);
                        $('#Routes_' + counter + '__TotalDistance').val(distance);
                        $('.Routes_' + counter + '__TotalDistance').text(distance);
                        counter++;
                        if (counter == count) {
                            $.post("Calqulate", $('form').serialize(), function (returndata) {
                                var data = returndata.data;
                                var result = returndata.result;
                                for (var i = 0; i < count; i++) {
                                    $('#Routes_' + i + '__RouteTariff').val(data[i]);
                                    $('.Routes_' + i + '__RouteTariff').text(data[i]);
                                }
                                $('#Amount').val(result);
                            }, "json");
                        }
                    });
                    //multiRoute = new ymaps.multiRouter.MultiRoute({
                    //    referencePoints: adress,
                    //    params: { routingMode: 'auto' }
                    //}, {
                    //    wayPointStartVisible: false,
                    //    wayPointFinishVisible: false,
                    //    routeActiveStrokeColor: colors[i > 7 ? i - 8: i],
                    //    wayPointIconColor: colors[i > 7 ? i - 8 : i],
                    //    boundsAutoApply: true
                    //});
                    //myMap.geoObjects.add(multiRoute);
                }

            }

            function addRoute(id) {
                var adr = $(id + '_OrdersAdresses').val().split(';'),
                        shopadress = $("#ShopAdress").val(),
                        adress = [shopadress];
                adress.push.apply(adress, adr);
                adress.push(shopadress);

                multiRoute = new ymaps.multiRouter.MultiRoute({
                    referencePoints: adress,
                    params: { routingMode: 'auto' }
                }, {
                    wayPointStartVisible: false,
                    wayPointFinishVisible: false,
                    routeActiveStrokeColor: colors[id > 7 ? id - 8 : id],
                    wayPointIconColor: colors[id > 7 ? id - 8 : id],
                    boundsAutoApply: true
                });
                myMap.geoObjects.add(multiRoute);
            }

            function closeAll(id) {
                for (var i = 0; i <= count; i++) {
                    var route = "#Routes_" + i + "_";
                    if (id != route) {
                        $(route + '_Detail').hide();
                        $(route + '_Glyphicon').removeClass("rotate");
                    }
                }
            }
            function showDetail(id) {
                closeAll(id);
                var detail = $(id + '_Detail');
                detail.toggle('fast', function () {
                    if (detail[0].style.display != 'none') {
                        addRoute(id);
                    }
                });

                $(id + '_Glyphicon').toggleClass("rotate");
            }
            $('.info').each(function (index, elem) {
                $(elem).bind("click", function (e) {
                    var id = '#' + e.currentTarget.id;
                    showDetail(id);
                    e.preventDefault();
                    myMap.geoObjects.remove(multiRoute);

                });
            });
        };


        $(function () {
            //$(".glyphicon-chevron-down").click(function () {
            //    $(this).toggleClass("rotate");
            //});
        });
        $('.doubleValue').change(function () {
            this.value = this.value.replace('.', ',');
        });
        ymaps.ready(init);
    </script>
}