@using Web.Models
@model Web.Models.CreateOrderViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="//api-maps.yandex.ru/2.1/?lang=uk_UA" type="text/javascript"></script>

<h2>Нове замовлення</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Замовлення</h4>
        <hr />
        @Html.ValidationSummary("", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.ShopId)
        @Html.HiddenFor(model => model.ShopAdress)
        @Html.HiddenFor(model => model.Distance)
        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.JQueryUI().DatepickerFor(model => model.Date)
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (User.IsInRole("Менеджер"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.User, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.UserId, new SelectList(Model.Users, "Id", "UserName"),
                        new { @class = "form-control", @style = "float: left; max-width: 207px;" })
                    @*<input type="button" id="addUser" value="Додати" class="btn btn-default" />*@
                    @Html.ActionLink("Додати", "Register", new { @returnUrl = "/Orders/Create?" }, new { @class = "btn btn-default" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.UserId)
        }<div id="createAdress" style="display: none;">

            <div id="AdressAct"></div>
            <input type="button" id="hideMap" value="Сховати" class="addAdress btn btn-default" />
        </div>

        <div id="textAdress">
            <div class="form-group">
                @Html.LabelFor(model => model.AdresShipping, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (string.IsNullOrEmpty(Model.AdresShipping?.FullAdress))
                    {
                        <span id="FullAdress">Нет</span>
                        <input type="button" id="showMap" value="Додадти" class="addAdress btn btn-default" />
                    }
                    else
                    {
                        <span id="FullAdress">@Model.AdresShipping.FullAdress</span>
                        <input type="button" id="showMap" value="Змінити" class="addAdress btn btn-default" />
                    }
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShippingTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ShippingTypeId, new SelectList(Model.ShippingTypes, "Id", "Type"), new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.PaymentTypesId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.PaymentTypesId, new SelectList(Model.PaymentTypes, "Id", "Type"), new { @class = "form-control" })
            </div>
        </div>

        <div id="productsList">
            @{
                Html.RenderPartial("_ProductsList", Model.Products, new ViewDataDictionary { TemplateInfo = new TemplateInfo { HtmlFieldPrefix = "Products" } });
            }
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Замовити" class="btn btn-primary" />
            </div>
        </div>
    </div>
                }

<div>
    @Html.ActionLink("Назад", "Index")
</div>
@section Scripts{
    <script>
        ymaps.ready(init);
        $(document).ready(function() {
            //$('.adressSity').val("Київ");
            getAdress();
        });

        function getStringAdress() {
            var res = $(".adressSity")[0].value;
            if ($(".adressStreet")[0].value) res += ", " + $(".adressStreet")[0].value;
            if ($(".adressHouse")[0].value) res += ", " + $(".adressHouse")[0].value;
            return res;
        }

        function changeFullAdress() {
            var adress = getStringAdress();
            $("#FullAdress")[0].innerHTML = adress === "" ? "Нет" : adress;
            return adress;
        }

        function getAdress() {
            $.post("AdressView", {
                    userId: $("#UserId").val()
                },
                function(data) {
                    $("#AdressAct").html(data);
                    $(".adressInput").change(changeFullAdress);
                    if ($("#FullAdress") === undefined) return;
                    var adress = changeFullAdress();
                    $("#showMap").attr('value', adress === "" ? 'Додати' : 'Змінити');

                }
            );
        };

        function init() {
            var myMap, firstGeoObject, shop, shopcoord,
                shopPoint, multiRoute;

            function correctAdress() {
                var city = firstGeoObject.properties.get('metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.Locality.LocalityName');
                var street = firstGeoObject.properties.get('metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.Locality.Thoroughfare.ThoroughfareName');
                var house = firstGeoObject.properties.get('metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.Locality.Thoroughfare.Premise.PremiseNumber');
                $('.adressSity').val(city);
                $('.adressStreet').val(street);
                $('.adressHouse').val(house);
                var coords = firstGeoObject.geometry.getCoordinates();
                myMap.geoObjects.remove(multiRoute);
                multiRoute = new ymaps.multiRouter.MultiRoute({
                    referencePoints: [shopcoord, coords],
                     params: { routingMode: 'auto' }
                 }, {
                     boundsAutoApply: true
                 });
                //if (coords[1] < shopcoord[1]) {
                //    myMap.setBounds([coords, shopcoord], {
                //        checkZoomRange: true
                //    });
                //} else myMap.setBounds([shopcoord, coords], {
                //    checkZoomRange: true
                //});
                myMap.geoObjects.add(multiRoute);
                ymaps.route([shopcoord, coords]).then(function(router) {
                    var distance = Math.round(router.getLength() / 1000);
                    $('#Distance').val(distance);
                });
            }

            function foundCoord(adress) {
                ymaps.geocode(adress, { results: 1 }).then(function(res) {
                    //myMap.geoObjects.remove(firstGeoObject);
                    firstGeoObject = res.geoObjects.get(0);
                    //myMap.geoObjects.add(firstGeoObject);
                    correctAdress(firstGeoObject);
                });
            }

            function getShopCoord() {
                ymaps.geocode($("#ShopAdress")[0].value, { results: 1 }).then(function(res) {
                    shop = res.geoObjects.get(0);
                    shopcoord = shop.geometry.getCoordinates();
                    shopPoint = new ymaps.Placemark(shopcoord, { iconContent: 'Магазин' }, { preset: 'islands#redStretchyIcon' });
                });
                
            }

            getShopCoord();

            function createMap() {

                myMap = new ymaps.Map('map', {
                    center: shopcoord,
                    zoom: 15,
                    type: 'yandex#map',
                    controls: []
                },{searchControlResults: 1});
                myMap.geoObjects.add(shopPoint);
                myMap.events.add('click', function(e) {
                    var coords = e.get('coords');
                    getAddress(coords);
                });
                //myMap.controls.add(searchControl);
            }

            function changeAdress() {
                var adress = getStringAdress();
                if (adress === "") {
                    adress = "Киів";
                    $('.adressSity').val(adress);
                }
                foundCoord(adress);
            }

// Определяем адрес по координатам (обратное геокодирование)
            function getAddress(coords) {
                //myPlacemark.properties.set('iconContent', 'поиск...');
                ymaps.geocode(coords).then(function(res) {
                    //myMap.geoObjects.remove(firstGeoObject);
                    firstGeoObject = res.geoObjects.get(0);
                    //myMap.geoObjects.add(firstGeoObject);
                    if (firstGeoObject === null) {
                        var _city = ''; // если не найден - возвращаем пустую строку
                    } else {
                        correctAdress();
                        changeAdress();
                    }
                });
            }

            $('#showMap').bind({
                click: function() {
                    $("#textAdress").hide();
                    $("#createAdress").show();
                    if (!myMap) {
                        createMap();
                        changeAdress();
                    }
                }
            });

            function destroyMap() {
                if (myMap) {
                    myMap.destroy();
                    myMap = null;
                }
                $("#textAdress").show();
                $("#createAdress").hide();
            }

            $('#hideMap').bind({
                click: function() {
                    destroyMap();
                    var adress = getStringAdress();
                    if ($("#FullAdress") != 'undefined') $("#FullAdress")[0].innerHTML = adress === "" ? "Нет" : adress;
                    $("#showMap").attr('value', adress === "" ? 'Додати' : 'Змінити');
                }
            });
            $("#UserId").change(function() {
                //destroyMap();
                $.post("AdressView", {
                        userId: $("#UserId").val()
                    },
                    function(data) {
                        $("#AdressAct").html(data);
                        if (myMap) {
                            myMap.destroy();
                            myMap = null;
                        }
                        createMap();
                        changeAdress();
                        $(".adressInput").change(changeAdress);
                        if ($("#FullAdress") === undefined) return;
                        var adress = getStringAdress();
                        $("#showMap").attr('value', adress === "" ? 'Додати' : 'Змінити');
                        $("#FullAdress")[0].innerHTML = adress === "" ? "Нет" : adress;

                    }
                );
            });
            $(".adressInput").change(changeAdress);
            
        }
    </script>
}